<?php
/**
* 2007-2022 PrestaShop
*
* NOTICE OF LICENSE
*
* This source file is subject to the Academic Free License (AFL 3.0)
* that is bundled with this package in the file LICENSE.txt.
* It is also available through the world-wide-web at this URL:
* http://opensource.org/licenses/afl-3.0.php
* If you did not receive a copy of the license and are unable to
* obtain it through the world-wide-web, please send an email
* to license@prestashop.com so we can send you a copy immediately.
*
* DISCLAIMER
*
* Do not edit or add to this file if you wish to upgrade PrestaShop to newer
* versions in the future. If you wish to customize PrestaShop for your
* needs please refer to http://www.prestashop.com for more information.
*
*  @author    PrestaShop SA <contact@prestashop.com>
*  @copyright 2007-2022 PrestaShop SA
*  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
*  International Registered Trademark & Property of PrestaShop SA
*/

if (!defined('_PS_VERSION_')) {
    exit;
}

class Mymodule extends Module
{
    protected $config_form = false;

    public function __construct()
    {
        $this->name = 'mymodule';
        $this->tab = 'front_office_features';
        $this->version = '1.0.0';
        $this->author = 'JorgeGL';
        $this->need_instance = 0;

        /**
         * Set $this->bootstrap to true if your module is compliant with bootstrap (PrestaShop 1.6)
         */
        $this->bootstrap = true;

        parent::__construct();

        $this->displayName = $this->l('My module');
        $this->description = $this->l('My module is a module created by follow the instructions on official Prestashop documentation. ');

        $this->confirmUninstall = $this->l('Are you sure to uninstall?');

        $this->ps_versions_compliancy = array('min' => '1.6', 'max' => _PS_VERSION_);
    }

    /**
     * Don't forget to create update methods if needed:
     * http://doc.prestashop.com/display/PS16/Enabling+the+Auto-Update
     */
    public function install()
    {
        Configuration::updateValue('MYMODULE_LIVE_MODE', false);

        return parent::install() &&
            $this->registerHook('header') &&
            $this->registerHook('backOfficeHeader');
    }

    public function uninstall()
    {
        Configuration::deleteByName('MYMODULE_LIVE_MODE');

        return parent::uninstall();
    }

    /**
     * Load the configuration form
     */
    public function getContent()
    {

        // These lines are commented because they are added by the generator,
        // We will write our own getContetn() method

        // if (((bool)Tools::isSubmit('submitMymoduleModule')) == true) {
        //     $this->postProcess();
        // }

        // $this->context->smarty->assign('module_dir', $this->_path);

        // $output = $this->context->smarty->fetch($this->local_path.'views/templates/admin/configure.tpl');

        // return $output.$this->renderForm();

        // Variable that will be passed to the return of this method
        // It's empty

        $output = '';

        // this part is executed only when the form is submitted
        if (Tools::isSubmit('submit' . $this->name)) {
            // retrieve the value set by the user
            $configValue = (string) Tools::getValue('MYMODULE_CONFIG');
    
            // check that the value is valid
            if (empty($configValue) || !Validate::isGenericName($configValue)) {
                // invalid value, show an error
                $output = $this->displayError($this->l('Invalid Configuration value'));
            } else {
                // value is ok, update it and display a confirmation message
                Configuration::updateValue('MYMODULE_CONFIG', $configValue);
                $output = $this->displayConfirmation($this->l('Perfecto, configuración salvada'));
            }
        }

        /*


        Tools::isSubmit() is a PrestaShop-specific method that checks if a given form has been submitted.
            In this case, if the configuration form has not yet been sent, 
            the whole if() block is skipped and PrestaShop will only use the last line, 
            which displays the configuration form using current values, as generated by the displayForm() method.

        Tools::getValue() is another PrestaShop-specific method that retrieves 
            the specified parameter from either POST or GET. 
            In this case, we retrieve the value of the MYMODULE_CONFIG form field, 
            turn its value into a text string using (string), 
            then store it in the $configValue variable.

        We then check that $configValue is not empty and valid. 
            In this case, we decided that the configuration should not accept special characters, 
            so we use Validate::isGenericName(). 
            The Validate object contains many data validation methods, 
            among which is isGenericName(), 
            a method that helps you keep only strings that are valid PrestaShop names – meaning, 
            a string that does not contain special characters.

        If any of these checks fail, the configuration will display an error message, 
            indicating that the form validation failed. 
            The $output variable, which contains the final rendition of the HTML code 
            that makes the configuration page, 
            will begin with an error message, that we create using PrestaShop’s displayError() method. 
            This method returns the correct HTML code for our need, 
            and since that code is first in $output, 
            this means the configuration will be displayed before any other content.

        If the checks are successful, this means we can store the value in our database. 
            The Configuration::updateValue() method will store the new value for MYMODULE_CONFIG 
            in the configuration database. After that, we want to add a friendly message to the user, 
            indicating that the value has indeed been saved.
            To that end, we use PrestaShop’s displayConfirmation() method 
            to add that message as the first data in the $output variable – and therefore, 
            at the top of the page.

        Finally, we use the custom displayForm() method (explained in the next section) 
            in order to build the form, that we want to render whether if it is submitted or not. 
            hen we will send the resulting HTML code into $output so that we can render the page. 
            Note that we could have included the code for displayForm() right within getContent(), 
            but chose to separate the two for readability and separation of concerns.


        / */


        // display any message, then the form... then whatever 

        return $output . $this->displayForm() . $this->displayCustomerListTwenty() . $this->displayInfoProductsOne();

    }


// Función que lista los clientes:

// consulta sql donde se incluye el nombre de la tabla
// condicional para listar resultados de la consulta
// Si la consulta va bien:
   // creamos la tabla con sus columnas y propiedades en un array
   // instanciamos la clase HelperList
   // le pasamos los parámetros que necesitemos
   // retornamos el método generateList con los parámetros: resultado de la consulta y array de la tabla


   protected function displayInfoProductsOne() 
   {

    // SQl query

    $sql = 'SELECT p.id_product, pl.name, pl.link_rewrite 
    FROM '. _DB_PREFIX_ . 'product p LEFT JOIN '. _DB_PREFIX_ . 'product_lang pl 
    ON (p.id_product = pl.id_product) 
    WHERE p.active = 1 AND pl.id_lang = 1 LIMIT 8';

    if ($result = Db::getInstance()->ExecuteS($sql)) {

        $this->fields_list = array(
            'id_product' => array(
                'title' => 'ID',
                'width' => 'auto',
                'type' => 'text'
            ),
            'name' => array(
                'title' => $this->l('Nombre del producto'),
                'width' => 'auto',
                'type' => 'text'
            ),
            'link_rewrite' => array(
                'title' => $this->l('URL amigable'),
                'width' => 'auto',
                'type' => 'text'
            ),
        );

        $helper = new HelperList();
        $helper->shopLinkType = '';
        $helper->simple_header = true;
        $helper->identifier = 'ProductListOne';
        $helper->show_toolbar = false;
        $helper->title = $this->l('Lista de 8 productos');
        $helper->table = $this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;
        return $helper->generateList($result, $this->fields_list);

    }

    return false;

   }


protected function displayCustomerListTwenty()
{
    // Select all available extra info tabs
    $sql = 'SELECT * FROM ' . _DB_PREFIX_ . 'customer LIMIT 20';

    if ($result = Db::getInstance()->ExecuteS($sql))
    {
        $this->fields_list = array(
            'id_customer' => array(
                'title' => 'ID',
                'width' => 'auto',
                'type' => 'text'
                ),
            'firstname' => array(
                'title' => $this->l('Name'),
                'width' => 'auto',
                'type' => 'text'
            ),
            'lastname' => array(
                'title' => $this->l('Apellido'),
                    'width' => 'auto',
                    'type' => 'text'

                )
            );

        $helper = new HelperList();
        $helper->shopLinkType = '';
        $helper->simple_header = true;
        $helper->identifier = 'customerlisttwenty';
        
        //$helper->actions = array('edit', 'delete');
        
        $helper->show_toolbar = false;
        
        // el título sería el nombre del módulo
        // $helper->title = $this->displayName;

        // el título sería una string
        // $helper->title="Lista de clientes";

        // el título es traducible
        $helper->title = $this->l('Lista de 20 clientes');

        $helper->table = $this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;
        return $helper->generateList($result, $this->fields_list);
    }

    return false;
}

    public function displayForm() {

        // Init Fields form array

        // This "multiarray" has one element, called "form"
        // that has 3 elements: legend, input and submit

        $form = [
            'form' => [
                'legend' => [
                    'title' => $this->l('Configuración'),
                ],
                'input' => [
                    [
                        'type' => 'text',
                        'label' => $this->l('Valor de configuración'),
                        'name' => 'MYMODULE_CONFIG',
                        'size' => 20,
                        'required' => true,
                    ],
                ],
                'submit' => [
                    'title' => $this->l('Save'),
                    'class' => 'btn btn-default pull-right',
                ],
            ],
        ];


        // instance of the HelperForm class

        $helper = new HelperForm();

        // setting of the object's methods

        // HelperForm -> component that enables to generate 
        // standard HTML elements for the back office 
        // as well as for module configuration pages.


        // Module, token and currentIndex
        $helper->table = $this->table;
        $helper->name_controller = $this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->currentIndex = AdminController::$currentIndex . '&' . http_build_query(['configure' => $this->name]);
        $helper->submit_action = 'submit' . $this->name;

        // Default language
        $helper->default_form_language = (int) Configuration::get('PS_LANG_DEFAULT');

        // Load current value into the form
        $helper->fields_value['MYMODULE_CONFIG'] = Tools::getValue('MYMODULE_CONFIG', Configuration::get('MYMODULE_CONFIG'));

        // return of the displayForm() method
        // $form array variable passed to the generateForm method in order to generate the form
        // using generateForm

        return $helper->generateForm([$form]);

    }


    /**
     * Create the form that will be displayed in the configuration of your module.
     */
    protected function renderForm()
    {
        $helper = new HelperForm();

        $helper->show_toolbar = false;
        $helper->table = $this->table;
        $helper->module = $this;
        $helper->default_form_language = $this->context->language->id;
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG', 0);

        $helper->identifier = $this->identifier;
        $helper->submit_action = 'submitMymoduleModule';
        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false)
            .'&configure='.$this->name.'&tab_module='.$this->tab.'&module_name='.$this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');

        $helper->tpl_vars = array(
            'fields_value' => $this->getConfigFormValues(), /* Add values for your inputs */
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
        );

        return $helper->generateForm(array($this->getConfigForm()));
    }

    /**
     * Create the structure of your form.
     */


     // one form in a protected function
     // example form... several fields


    protected function getConfigForm()
    {
        return array(
            'form' => array(
                'legend' => array(
                'title' => $this->l('Settings'),
                'icon' => 'icon-cogs',
                ),
                'input' => array(
                    array(
                        'type' => 'switch',
                        'label' => $this->l('Live mode'),
                        'name' => 'MYMODULE_LIVE_MODE',
                        'is_bool' => true,
                        'desc' => $this->l('Use this module in live mode'),
                        'values' => array(
                            array(
                                'id' => 'active_on',
                                'value' => true,
                                'label' => $this->l('Enabled')
                            ),
                            array(
                                'id' => 'active_off',
                                'value' => false,
                                'label' => $this->l('Disabled')
                            )
                        ),
                    ),
                    array(
                        'col' => 3,
                        'type' => 'text',
                        'prefix' => '<i class="icon icon-envelope"></i>',
                        'desc' => $this->l('Enter a valid email address'),
                        'name' => 'MYMODULE_ACCOUNT_EMAIL',
                        'label' => $this->l('Email'),
                    ),
                    array(
                        'type' => 'password',
                        'name' => 'MYMODULE_ACCOUNT_PASSWORD',
                        'label' => $this->l('Password'),
                    ),
                ),
                'submit' => array(
                    'title' => $this->l('Save'),
                ),
            ),
        );
    }

   
    /**
     * Set values for the inputs.
     */

     // protected function that gets the values from the form
     // returned in an array

    protected function getConfigFormValues()
    {
        return array(
            'MYMODULE_LIVE_MODE' => Configuration::get('MYMODULE_LIVE_MODE', true),
            'MYMODULE_ACCOUNT_EMAIL' => Configuration::get('MYMODULE_ACCOUNT_EMAIL', 'contact@prestashop.com'),
            'MYMODULE_ACCOUNT_PASSWORD' => Configuration::get('MYMODULE_ACCOUNT_PASSWORD', null),
        );
    }

    /**
     * Save form data.
     */

     // Function that process the form data, commented at getContent()
     // is a protected function
     // uses the protected function getConfigFormValues

    protected function postProcess()
    {
        $form_values = $this->getConfigFormValues();

        foreach (array_keys($form_values) as $key) {
            Configuration::updateValue($key, Tools::getValue($key));
        }
    }

    /**
    * Add the CSS & JavaScript files you want to be loaded in the BO.
    */
    public function hookBackOfficeHeader()
    {
        if (Tools::getValue('module_name') == $this->name) {
            $this->context->controller->addJS($this->_path.'views/js/back.js');
            $this->context->controller->addCSS($this->_path.'views/css/back.css');
        }
    }

    /**
     * Add the CSS & JavaScript files you want to be added on the FO.
     */
    public function hookHeader()
    {
        $this->context->controller->addJS($this->_path.'/views/js/front.js');
        $this->context->controller->addCSS($this->_path.'/views/css/front.css');
    }
}
